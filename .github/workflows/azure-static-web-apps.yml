name: Azure Static Web Apps CI/CD

on:
  push:
    branches: [ main ]
  pull_request:
    types: [opened, synchronize, reopened]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      NODE_VERSION: '18'

    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Deploy to Azure Static Web Apps (staging)
        id: deploy
        uses: Azure/static-web-apps-deploy@v1
        with:
          azure_static_web_apps_api_token: ${{ secrets.AZURE_STATIC_WEB_APPS_API_TOKEN }}
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          action: "upload"
          app_location: "/"                    # Root directory where package.json is
          api_location: "api"                  # Azure Functions directory
          output_location: "dist/public"       # Vite outputs to dist/public (from vite.config.ts)
          skip_app_build: true               # We already built above
          skip_api_build: false              # Let Azure build the API
          deployment_environment: "staging"

      - name: Output deployment URLs
        run: |
          echo "Deployment successful!"
          echo "Staging URL: ${{ steps.deploy.outputs.static_web_app_url }}"

  smoke-test:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: Wait for deployment to settle
        run: sleep 30

      - name: Run health check
        run: |
          DEPLOYMENT_URL="${{ needs.build-and-deploy.outputs.static_web_app_url }}"
          
          # Check frontend
          STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL" || echo "000")
          if [ "$STATUS" -ne "200" ]; then
            echo "Frontend health check failed! Status: $STATUS"
            exit 1
          fi
          echo "✅ Frontend is healthy"
          
          # Check API health endpoint
          API_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$DEPLOYMENT_URL/api/health" || echo "000")
          if [ "$API_STATUS" -ne "200" ]; then
            echo "API health check failed! Status: $API_STATUS"
            exit 1
          fi
          echo "✅ API is healthy"

  lighthouse-audit:
    needs: build-and-deploy
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Lighthouse CI
        uses: treosh/lighthouse-ci-action@v11
        with:
          urls: |
            ${{ needs.build-and-deploy.outputs.static_web_app_url }}
          uploadArtifacts: true
          temporaryPublicStorage: true